#
# How tasks recur (see https://swiftodoapp.com/todotxt-syntax/recurrence/)
# Normal: a new task is added when the previous task is completed. Default.
# Strict: a new task is added using the recurrence schedule, regardless of the status of the previous task. Specify
#   strict using +
#
# Format:
# <creation_date> <recurrence> <task>
#
# Examples:
# 2021-12-23 weekly Pay therapy bill +important @personal
#
# Accepted recurrence:
# daily
# weekdaily
# weekendly
# every N days
# weekly
# every N weeks
# monthly
# yearly
# every N months
# Nth day monthly
#
# Revised approach (from swifttodo)
# d (calendar days)
# b (business days)
# w weeks
# m months
# y years
#
# Examples:
# 2021-12-23 +1w Pay therapy bill +important @personal
# 2021-12-20 1d Take trash out to garage @home
#
# Approach 3:
#
# daily: task    
# day: task
# month_day(st|rd|th): task
# Normal: a new task is added only if there is not matching existing task. Default.
# Strict: a new task is added using the recurrence schedule, regardless of whether 
# a matching task already exists. Specify strict using + at the beginning of the 
# recurrence specifier.
#  
# day       is one of "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" or "sunday". If a task needs to 
#           happen on two different days of the week, you'll need two lines.
# month_day is the day of the month on which a task should recur 
#
# Examples:
# daily: run the dishwasher
# sunday: (A) Weekly review of projects list
# monday: Take out the trash @home
# +18th: Apply the dog's flea medicine
#
# Issues to deal with:
# If recur check only runs when console is running:
#  - Could be an arbitrary number of days between runs. Could mitigate by running periodically on own thread.
#  - If arbitrary number of days, have to manage start-of-week and start-of-month spans.
# If recur check runs on a schedule:
#  - Have to manage setup as a recurring task (cron or Windows scheduled task)
